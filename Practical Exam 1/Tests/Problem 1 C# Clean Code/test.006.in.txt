510
//
// (C) Copyright 2009 Irantha Suwandarathna (irantha@gmail.com)
// All rights reserved.
//

/* Copyright (c) 1995-2000, The Hypersonic SQL Group.
 * All rights reserved.
 *
 * Redistribution and use _in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions _in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer _in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the Hypersonic SQL Group nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE HYPERSONIC SQL GROUP,
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * This software consists of voluntary contributions made by many individuals
 * on behalf of the Hypersonic SQL Group.
 *
 *
 * For work added by the HSQL Development Group:
 *
 * Copyright (c) 2001-2008, The HSQL Development Group
 * All rights reserved.
 *
 * Redistribution and use _in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * Redistributions of source code must retain the above copyright notice, this
 * list of conditions and the following disclaimer.
 *
 * Redistributions _in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer _in the documentation
 * and/or other materials provided with the distribution.
 *
 * Neither the name of the HSQL Development Group nor the names of its
 * contributors may be used to endorse or promote products derived from this
 * software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL HSQL DEVELOPMENT GROUP, HSQLDB.ORG,
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */


using System;
using System.Text;
using System.IO;
using EffiProz.Core.Lib;
using EffiProz.Core.DataTypes;
using EffiProz.Core.Indexes;
using EffiProz.Core.Errors;
using EffiProz.Core.Persist;
using EffiProz.Core.Lib.IO;


namespace EffiProz.Core
{
    /**
     * Reusable object for processing LIKE queries.
     *
     * Enhanced _in successive versions of HSQLDB.
     *
     * @author Thomas Mueller (Hypersonic SQL Group)
     * @version 1.8.0
     * @since Hypersonic SQL
     */

    // boucherb@users 20030930 - patch 1.7.2 - optimize into joins if possible
    // fredt@users 20031006 - patch 1.7.2 - reuse Like objects for all rows
    public class Like
    {

        private static BinaryData maxByteValue =
       new BinaryData(new byte[] { byte.MaxValue }, false);
        private char[] cLike;
        private int[] wildCardType;
        private int iLen;
        private bool isIgnoreCase;
        private int iFirstWildCard;
        private bool isNull;
        int escapeChar;
        public bool hasCollation;
        const int UNDERSCORE_CHAR = 1;
        const int PERCENT_CHAR = 2;
        public bool isVariable = true;
        public bool isBinary = false;
        public SqlType dataType;

        public Like() { }

        void setParams(bool collation)
        {
            hasCollation = collation;
        }

        public void setIgnoreCase(bool flag)
        {
            isIgnoreCase = flag;
        }

        private Object getStartsWith()
        {

            if (iLen == 0)
            {
                return isBinary ? (object) BinaryData.zeroLengthBinary
                                : "";
            }

            StringBuilder sb = null;
            ByteArrayOutputStream os = null;

            if (isBinary)
            {
                os = new ByteArrayOutputStream();
            }
            else
            {
                sb = new StringBuilder();
            }

            int i = 0;

            for (; i < iLen && wildCardType[i] == 0; i++)
            {
                if (isBinary)
                {
                    os.writeByte((byte)cLike[i]);
                }
                else
                {
                    sb.Append(cLike[i]);
                }
            }

            if (i == 0)
            {
                return null;
            }

            return isBinary ? (object)new BinaryData(os.toByteArray(), false)
                            : sb.ToString();
        }

        public Boolean? compare(Session session, Object o)
        {

            if (o == null)
            {
                return null;
            }

            if (isNull)
            {
                return null;
            }

            if (isIgnoreCase)
            {
                o = ((CharacterType)dataType).upper(session, o);
            }

            return compareAt(o, 0, 0, iLen, getLength(session, o), cLike, wildCardType)
                   ? true
                   : false;
        }

        char getChar(Object o, int i)
        {

            char c;

            if (isBinary)
            {
                c = (char)((BinaryData)o).getBytes()[i];
            }
            else
            {
                c = ((String)o)[i];
            }

            return c;
        }

        int getLength(SessionInterface session, Object o)
        {

            int l;

            if (isBinary)
            {
                l = (int)((BinaryData)o).length(session);
            }
            else
            {
                l = ((String)o).Length;
            }

            return l;
        }

        private bool compareAt(Object o, int i, int j, int iLen, int jLen,
                                  char[] cLike, int[] wildCardType)
        {

            for (; i < iLen; i++)
            {
                switch (wildCardType[i])
                {

                    case 0:                  // general character
                        if ((j >= jLen) || (cLike[i] != getChar(o, j++)))
                        {
                            return false;
                        }
                        break;

                    case UNDERSCORE_CHAR:    // underscore: do not test this character
                        if (j++ >= jLen)
                        {
                            return false;
                        }
                        break;

                    case PERCENT_CHAR:       // percent: none or any character(s)
                        if (++i >= iLen)
                        {
                            return true;
                        }

                        while (j < jLen)
                        {
                            if ((cLike[i] == getChar(o, j))
                                    && compareAt(o, i, j, iLen, jLen, cLike,
                                                 wildCardType))
                            {
                                return true;
                            }

                            j++;
                        }

                        return false;
                }
            }

            if (j != jLen)
            {
                return false;
            }

            return true;
        }

       public void setPattern(Session session, Object pattern, Object escape,
                        bool hasEscape)
        {

            isNull = pattern == null;

            if (!hasEscape)
            {
                escapeChar = -1;
            }
            else
            {
                if (escape == null)
                {
                    isNull = true;

                    return;
                }
                else
                {
                    int length = getLength(session, escape);

                    if (length != 1)
                    {
                        if (isBinary)
                        {
                            throw Error.error(ErrorCode.X_2200D);
                        }
                        else
                        {
                            throw Error.error(ErrorCode.X_22019);
                        }
                    }

                    escapeChar = getChar(escape, 0);
                }
            }

            if (isNull)
            {
                return;
            }

            if (isIgnoreCase)
            {
                pattern = (String)((CharacterType)dataType).upper(null, pattern);
            }

            iLen = 0;
            iFirstWildCard = -1;

            int l = getLength(session, pattern);

            cLike = new char[l];
            wildCardType = new int[l];

            bool bEscaping = false,
                    bPercent = false;

            for (int i = 0; i < l; i++)
            {
                char c = getChar(pattern, i);

                if (!bEscaping)
                {
                    if (escapeChar == c)
                    {
                        bEscaping = true;

                        continue;
                    }
                    else if (c == '_')
                    {
                        wildCardType[iLen] = UNDERSCORE_CHAR;

                        if (iFirstWildCard == -1)
                        {
                            iFirstWildCard = iLen;
                        }
                    }
                    else if (c == '%')
                    {
                        if (bPercent)
                        {
                            continue;
                        }

                        bPercent = true;
                        wildCardType[iLen] = PERCENT_CHAR;

                        if (iFirstWildCard == -1)
                        {
                            iFirstWildCard = iLen;
                        }
                    }
                    else
                    {
                        bPercent = false;
                    }
                }
                else
                {
                    if (c == escapeChar || c == '_' || c == '%')
                    {
                        bPercent = false;
                        bEscaping = false;
                    }
                    else
                    {
                        throw Error.error(ErrorCode.X_22025);
                    }
                }

                cLike[iLen++] = c;
            }

            if (bEscaping)
            {
                throw Error.error(ErrorCode.X_22025);
            }

            for (int i = 0; i < iLen - 1; i++)
            {
                if ((wildCardType[i] == PERCENT_CHAR)
                        && (wildCardType[i + 1] == UNDERSCORE_CHAR))
                {
                    wildCardType[i] = UNDERSCORE_CHAR;
                    wildCardType[i + 1] = PERCENT_CHAR;
                }
            }
        }

        bool hasWildcards()
        {
            return iFirstWildCard != -1;
        }

        public bool isEquivalentToUnknownPredicate()
        {
            return isNull;
        }

        public bool isEquivalentToEqualsPredicate()
        {
            return !isVariable && iFirstWildCard == -1;
        }

        public bool isEquivalentToNotNullPredicate()
        {

            if (isVariable || isNull || !hasWildcards())
            {
                return false;
            }

            for (int i = 0; i < wildCardType.Length; i++)
            {
                if (wildCardType[i] != PERCENT_CHAR)
                {
                    return false;
                }
            }

            return true;
        }

        public bool isEquivalentToBetweenPredicate()
        {

            return !isVariable && iFirstWildCard > 0
                   && iFirstWildCard == wildCardType.Length - 1
                   && cLike[iFirstWildCard] == '%';
        }

        public bool isEquivalentToBetweenPredicateAugmentedWithLike()
        {
            return !isVariable && iFirstWildCard > 0
                   && cLike[iFirstWildCard] == '%';
        }

        public Object getRangeLow()
        {
            return getStartsWith();
        }

        public Object getRangeHigh(Session session)
        {

            Object o = getStartsWith();

            if (o == null)
            {
                return null;
            }

            if (isBinary)
            {
                return new BinaryData(session, (BinaryData)o, maxByteValue);
            }
            else
            {
                return dataType.concat(session, o, "\uffff");
            }
        }

        public String describe(Session session)
        {

            StringBuilder sb = new StringBuilder();

            sb.Append(base.ToString()).Append("[\n");
            sb.Append("escapeChar=").Append(escapeChar).Append('\n');
            sb.Append("isNull=").Append(isNull).Append('\n');

            //        sb.Append("optimised=").Append(optimised).Append('\n');
            sb.Append("isIgnoreCase=").Append(isIgnoreCase).Append('\n');
            sb.Append("iLen=").Append(iLen).Append('\n');
            sb.Append("iFirstWildCard=").Append(iFirstWildCard).Append('\n');
            sb.Append("cLike=");
            sb.Append(StringUtil.arrayToString(cLike));
            sb.Append('\n');
            sb.Append("wildCardType=");
            sb.Append(StringUtil.arrayToString(wildCardType));
            sb.Append(']');

            return sb.ToString();
        }
    }
}
